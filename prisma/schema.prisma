datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id           String         @id @default(cuid())
  username     String         @unique
  email        String?        @unique
  firstName    String?
  lastName     String?
  image        String?
  password     String
  score        Int            @default(0)
  isActive     Boolean        @default(true)
  role         Role           @default(USER)
  Question     Question[]
  Answer       Answer[]
  QuestionVote QuestionVote[]
  AnswerVote   AnswerVote[]
  ResetToken   ResetToken[]
  fieldId      String
  field        Field          @relation(fields: [fieldId], references: [id])
}

model Question {
  id      String         @id @default(cuid())
  body    String
  votes   Int            @default(0)
  userId  String
  user    User           @relation(fields: [userId], references: [id])
  answer  Answer[]
  Likes   QuestionVote[]
  fieldId String
  field   Field          @relation(fields: [fieldId], references: [id])
}

model Answer {
  id         String       @id @default(cuid())
  body       String
  votes      Int          @default(0)
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  questionId String
  question   Question     @relation(fields: [questionId], references: [id])
  AnswerLike AnswerVote[]
}

model QuestionVote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  type       VoteType

  @@unique([userId, questionId])
}

model AnswerVote {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  answer   Answer   @relation(fields: [answerId], references: [id])
  answerId String
  type     VoteType

  @@unique([userId, answerId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model ResetToken {
  id        String @id @default(cuid())
  uniqueKey String @unique
  user      User   @relation(fields: [userId], references: [id])
  email     String
  userId    String
}

// Aka categories
model Field {
  id       String     @id @default(cuid())
  name     String     @unique
  User     User[]
  Question Question[]
}

// model QuesComment {
//   id         String   @id @default(cuid())
//   body       String
//   questionId String
//   question   Question @relation(fields: [questionId], references: [id])
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String
// }

// model AnsComment {
//   id       String @id @default(cuid())
//   body     String
//   answerId String
//   answer   Answer @relation(fields: [answerId], references: [id])
//   user     User   @relation(fields: [userId], references: [id])
//   userId   String
// }
